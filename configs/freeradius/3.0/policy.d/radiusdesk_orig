#____ RADIUSdesk policies __________

RADIUSdesk_filter_username {
	if (&User-Name) {	
		if (&User-Name =~ / /) {
			update request {
				&Module-Failure-Message += 'Rejected: User-Name contains whitespace'
			}
			reject
		}
	}
}

RADIUSdesk_acct_dynamic_client_check {
    update control {
        #Set it to zero which means we don't know this client
        Rd-Dynamic-Client := 0
        #Set Rd-Unknown-Added and not added yet
        Rd-Unknown-Added := 0
        #Set client updated to 0
        Rd-Client-Updated := 0
    }

    if(&request:NAS-Identifier){

        #Check wether the client is there and active
        update control {
            #If we do not find an entry we return 2
            Rd-Client-Active := "%{sql:SELECT IFNULL((SELECT dynamic_clients.active FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),2)}"
        }

        if((&control:Rd-Client-Active == 0)||(&control:Rd-Client-Active == 1)){
            #Update the 'most recent' ip and timestamp
            "%{sql:UPDATE dynamic_clients SET \
                last_contact_ip='%{request:Packet-Src-IP-Address}', \
                last_contact=now() \
                WHERE nasidentifier='%{request:NAS-Identifier}' \
            }"

            update control {
                Rd-Client-Updated := 1
            }

            if(&control:Rd-Client-Active == 1){
                update control {
                    Rd-Dynamic-Client := 1
                }
            }
        }

        #We did not find it; record it in unknown
        if(&control:Rd-Client-Active == 2){
            #Update the unknown_dynamic_clients table         
            "%{sql:INSERT INTO unknown_dynamic_clients SET nasidentifier='%{request:NAS-Identifier}', \
                last_contact_ip='%{request:Packet-Src-IP-Address}', \
                last_contact=now(), \
                calledstationid='%{request:Called-Station-Id}' \
                on duplicate key update last_contact=now(),last_contact_ip='%{request:Packet-Src-IP-Address}' \
            }"
            update control {
                Rd-Unknown-Added := 1
            }
        }
    }

    #Called-Station-Id - We only enter here if it was not set in the first place
    if((&control:Rd-Client-Active == 2)&&(&request:Called-Station-Id)){

        #Check whether the client is there and active
        update control {
            #If we do not find an entry we return 2
            Rd-Client-Active := "%{sql:SELECT IFNULL((SELECT dynamic_clients.active FROM dynamic_clients WHERE calledstationid='%{request:Called-Station-Id}'),2)}"
        }

        if((&control:Rd-Client-Active == 0)||(&control:Rd-Client-Active == 1)){

            #Only if it has not been updated
            if(&control:Rd-Client-Updated == 0){
                #Update the 'most recent' ip and timestamp
                "%{sql:UPDATE dynamic_clients SET \
                    last_contact_ip='%{request:Packet-Src-IP-Address}', \
                    last_contact=now() \
                    WHERE calledstationid='%{request:Called-Station-Id}' \
                }"
            }

            if(&control:Rd-Client-Active == 1){
                update control {
                    Rd-Dynamic-Client := 1
                }
            }
        }

        if(&control:Rd-Client-Active == 2){
            #Update the unknown_dynamic_clients table only if it was not updated before
            if(&control:Rd-Unknown-Added == 0){
                "%{sql:INSERT INTO unknown_dynamic_clients SET nasidentifier='%{request:NAS-Identifier}', \
                    last_contact_ip='%{request:Packet-Src-IP-Address}', \
                    last_contact=now(), \
                    calledstationid='%{request:Called-Station-Id}' \
                    on duplicate key update last_contact=now(),last_contact_ip='%{request:Packet-Src-IP-Address}' \
                }"
                update control {
                    Rd-Unknown-Added := 1
                }
            }
        }
    }
    ok
}


RADIUSdesk_find_dynamic_client {

    update control {
        #Set it to zero which means we don't know this client
        Rd-Dynamic-Client := 0
        #Set Rd-Unknown-Added and not added yet
        Rd-Unknown-Added := 0
        #Set client updated to 0
        Rd-Client-Updated := 0
    }

    #NAS-Identifier
    if(&request:NAS-Identifier){

        #Check wether the client is there and active
        update control {
            #If we do not find an entry we return 2
            Rd-Client-Active := "%{sql:SELECT IFNULL((SELECT dynamic_clients.active FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),2)}"
        }

        if((&control:Rd-Client-Active == 0)||(&control:Rd-Client-Active == 1)){

            #Update the 'most recent' ip and timestamp
            "%{sql:UPDATE dynamic_clients SET \
                last_contact_ip='%{request:Packet-Src-IP-Address}', \
                last_contact=now() \
                WHERE nasidentifier='%{request:NAS-Identifier}' \
            }"

            update control {
                Rd-Client-Updated := 1
            }

            if(&control:Rd-Client-Active == 1){
                update control {
                    Rd-Dynamic-Client := 1
                }
            }
            else {
                update reply {                
                    Reply-Message := "NAS-Identifier %{request:NAS-Identifier} is disabled"
                }
                reject
            }
        }

        #We did not find it; record it in unknown
        if(&control:Rd-Client-Active == 2){
            #Update the unknown_dynamic_clients table         
            "%{sql:INSERT INTO unknown_dynamic_clients SET nasidentifier='%{request:NAS-Identifier}', \
                last_contact_ip='%{request:Packet-Src-IP-Address}', \
                last_contact=now(), \
                calledstationid='%{request:Called-Station-Id}' \
                on duplicate key update last_contact=now(),last_contact_ip='%{request:Packet-Src-IP-Address}' \
            }"
            update control {
                Rd-Unknown-Added := 1
            }
        }
    }
    
    #Called-Station-Id - We only enter here if it was not set in the first place
    if((&control:Rd-Client-Active == 2)&&(&request:Called-Station-Id)){

         #Check whether the client is there and active
        update control {
            #If we do not find an entry we return 2
            Rd-Client-Active := "%{sql:SELECT IFNULL((SELECT dynamic_clients.active FROM dynamic_clients WHERE calledstationid='%{request:Called-Station-Id}'),2)}"
        }

        if((&control:Rd-Client-Active == 0)||(&control:Rd-Client-Active == 1)){

            #Only if it has not been updated
            if(&control:Rd-Client-Updated == 0){
                #Update the 'most recent' ip and timestamp
                "%{sql:UPDATE dynamic_clients SET \
                    last_contact_ip='%{request:Packet-Src-IP-Address}', \
                    last_contact=now() \
                    WHERE calledstationid='%{request:Called-Station-Id}' \
                }"
            }

            if(&control:Rd-Client-Active == 1){
                update control {
                    Rd-Dynamic-Client := 1
                }
            }
            else {
                update reply {                
                    Reply-Message := "Called-Station-Id %{request:Called-Station-Id} is disabled"
                }
                reject
            }
        }

        if(&control:Rd-Client-Active == 2){
            #Update the unknown_dynamic_clients table only if it was not updated before
            if(&control:Rd-Unknown-Added == 0){
                "%{sql:INSERT INTO unknown_dynamic_clients SET nasidentifier='%{request:NAS-Identifier}', \
                    last_contact_ip='%{request:Packet-Src-IP-Address}', \
                    last_contact=now(), \
                    calledstationid='%{request:Called-Station-Id}' \
                    on duplicate key update last_contact=now(),last_contact_ip='%{request:Packet-Src-IP-Address}' \
                }"
            }
            update control {
                Rd-Unknown-Added := 1
            }
        }
    }

    #If it was not identified nor disabled we reject it
    if(&control:Rd-Dynamic-Client == 0){
        update reply {
            Reply-Message := "RADIUS client not allowed. Contact server administrator"
        }
        reject
    }
}

    RADIUSdesk_rewrite_calling_station_id {
        if(&request:Calling-Station-Id){
       		if(&request:Calling-Station-Id =~ /([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([0-9a-f]{2})/i){
                	update request {
                        	Calling-Station-Id := "%{1}-%{2}-%{3}-%{4}-%{5}-%{6}"
                	}
        	}
        	else {
                	noop
        	}
        }
        else {
            noop
        }
	}


	RADIUSdesk_rewrite_called_station_id {
        if(&request:Called-Station-Id =~ /^([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:.]?([0-9a-f]{2})[-:]?([0-9a-f]{2})[-:]?([-a-z0-9_. ]*)?/i){

				if("%{7}"){
                	update control {
                        Rd-Ssid-Value := "%{7}"
                	}
					updated
				}
				else {
					noop
				} 
        }
        else {
                noop
        }
	}


RADIUSdesk_device_check {

    update control {
        Rd-Mac-Tmp-Username := "%{request:User-Name}"
    }

    update request {
        User-Name := "%{request:Calling-Station-Id}"
    }
    RADIUSdesk_user_check

    update request {
        User-Name := "%{control:Rd-Mac-Tmp-Username}"
   }
}

RADIUSdesk_device_owner_check {

    update control {
		    Rd-Mac-Tmp-Username := "%{request:User-Name}"
    }
    update request {
        User-Name := "%{control:Rd-Tmp-Owner}"
    }
    RADIUSdesk_user_check

    update request {
        User-Name := "%{control:Rd-Mac-Tmp-Username}"
    }
    RADIUSdesk_user_check
}

#--------------------------
#--New addition Sept 2018--
#--------------------------
RADIUSdesk_nas_data_counter {

    update control {
        #Set it to zero which means it is not active
        Rd-Data-Limit-Active := 0
    }

    #NAS-Identifier
    if(&request:NAS-Identifier){
        update control {
            Rd-Data-Limit-Active := "%{sql:SELECT IFNULL((SELECT dynamic_clients.data_limit_active FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),0)}"  
        }
    
        if(&control:Rd-Data-Limit-Active == 1){
            update control {
            
                Rd-Data-Limit-Amount := "%{sql:SELECT IFNULL((SELECT dynamic_clients.data_limit_amount FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),1)}"
                Rd-Data-Limit-Unit := "%{sql:SELECT IFNULL((SELECT dynamic_clients.data_limit_unit FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),'mb')}"
                Rd-Data-Limit-Reset-On := "%{sql:SELECT IFNULL((SELECT dynamic_clients.data_limit_reset_on FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),1)}"
                Rd-Data-Limit-Reset-Hour := "%{sql:SELECT IFNULL((SELECT dynamic_clients.data_limit_reset_hour FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),0)}"
                 Rd-Data-Limit-Reset-Min := "%{sql:SELECT IFNULL((SELECT dynamic_clients.data_limit_reset_minute FROM dynamic_clients WHERE nasidentifier='%{request:NAS-Identifier}'),0)}"
            }
            
            #Use Perl to determine the Rd-Data-Start-Time based on the value of Rd-Data-Limit-Reset-On
            pl_client_start_time
            
            update control {
                Rd-Data-Used := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Data-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))\
                        + SUM(acctoutputoctets -GREATEST((%{control:Rd-Data-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                        FROM radacct WHERE nasidentifier='%{request:NAS-Identifier}' \
                        AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Data-Start-Time}'}"
            }
            pl_client_check_usage      
         }
    }
}
#------------------------------
#--END New addition Sept 2018--
#------------------------------

RADIUSdesk_data_counter {

    if((&control:Rd-Total-Data)&&(&control:Rd-Reset-Type-Data)&&(&control:Rd-Cap-Type-Data == 'hard')){
        pl_reset_time_for_data
        if(updated){ # Reset Time was updated,
            # we can now use it in a query
            if(&control:Rd-Tmp-Avail-Data){ #This indicates it it a device!
                update control {
                    Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))+ SUM(acctoutputoctets -GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0) FROM radacct WHERE callingstationid='%{request:User-Name}' AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                }
            }
            else{ 
                #Here we need to see if the counter is to be applied on the device level and there is a device present in the request
                if((&control:Rd-Mac-Counter-Data)&&(&request:Calling-Station-Id)){
                    update control {
                        Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))\
                        + SUM(acctoutputoctets -GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                        FROM radacct WHERE username='%{request:User-Name}' AND callingstationid='%{request:Calling-Station-Id}' \
                        AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                    }
                }
                else{
                    update control {
                        Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0))\
                        + SUM(acctoutputoctets -GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                        FROM radacct WHERE username='%{request:User-Name}'\
                        AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                    }
                }
            }
        }
        else{
            #Asumes reset type = never
            #Get the total usage of the user
            if(&control:Rd-Tmp-Avail-Data){ #This indicates it it a device!
                update control {
                    Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets)+SUM(acctoutputoctets),0) FROM radacct WHERE callingstationid='%{request:User-Name}'}"
                }
            }
            else{
                if((&control:Rd-Mac-Counter-Data)&&(&request:Calling-Station-Id)){
                    update control {
                        Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets)+SUM(acctoutputoctets),0) FROM radacct WHERE username='%{request:User-Name}' \
                        AND callingstationid='%{request:Calling-Station-Id}'}"
                    }
                }
                else{
                    update control {
                        Rd-Used-Data := "%{sql:SELECT IFNULL(SUM(acctinputoctets)+SUM(acctoutputoctets),0) FROM radacct WHERE username='%{request:User-Name}'}"
                    }
                }
            }
        }

        #Now we know how much they are allowed to use and the usage.
        pl_check_usage_data
    }
}


RADIUSdesk_time_counter {

    if((&control:Rd-Total-Time)&&(&control:Rd-Reset-Type-Time)&&(&control:Rd-Cap-Type-Time == 'hard')){
        pl_reset_time_for_time
        if(updated){ # Reset Time was updated,
            # we can now use it in a query
            if(&control:Rd-Tmp-Avail-Time){ #This indicates it it a device!
                update control {
					Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0) FROM radacct WHERE callingstationid='%{request:User-Name}' AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                }
            }
            else{
                #Here we need to see if the counter is to be applied on the device level and there is a device present in the request
                if((&control:Rd-Mac-Counter-Time)&&(&request:Calling-Station-Id)){
                    update control {
                        Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                        FROM radacct WHERE username='%{request:User-Name}' AND callingstationid='%{request:Calling-Station-Id}' \
                        AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                    }
                }
                else{
                    update control {
                        Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(acctsessiontime - GREATEST((%{control:Rd-Start-Time} - UNIX_TIMESTAMP(acctstarttime)), 0)),0)\
                        FROM radacct WHERE username='%{request:User-Name}' AND UNIX_TIMESTAMP(acctstarttime) + acctsessiontime > '%{control:Rd-Start-Time}'}"
                    }
                }
            }
        }
        else{
            #Asumes reset type = never
            #Get the total usage of the user
            if(&control:Rd-Tmp-Avail-Time){ #This indicates it it a device!
                update control {
                    Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(AcctSessionTime),0) FROM radacct WHERE callingstationid='%{request:User-Name}'}"
                }
            }
            else{
               if((&control:Rd-Mac-Counter-Time)&&(&request:Calling-Station-Id)){
                    update control {
                        Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(AcctSessionTime),0) FROM radacct WHERE username='%{request:User-Name}' \
                        AND callingstationid='%{request:Calling-Station-Id}'}"
                    }
                }
                else{
                    update control {
                        Rd-Used-Time := "%{sql:SELECT IFNULL(SUM(AcctSessionTime),0) FROM radacct WHERE username='%{request:User-Name}'}"
                    }
                }
            }
        }

        #Now we know how much they are allowed to use and the usage.
        pl_check_usage_time
    }
}

RADIUSdesk_voucher_check {
    if(&control:Rd-Voucher){

        #Check if the Rd-Voucher is in the correct format
        if(&control:Rd-Voucher =~ /([0-9]{1,3})[-]?([0-9]{2})[-]?([0-9]{2})[-]?([0-9]{2})/i){

                #Get the amount of time available
            	update control {
                    	Rd-Voucher-Time-Available := "%{expr: (%{1} * 86400)+(%{2} * 3600) + (%{3}* 60) +(%{4})}"
            	}

                #Check if the voucher connected before

                if("%{sql:SELECT count(username) FROM radacct WHERE radacct.username='%{request:User-Name}'}" > 0){

                    update control {
                        #select (UNIX_TIMESTAMP(now()) - UNIX_TIMESTAMP(acctstarttime)) as time_since_login from radacct where username='000001' order by acctstarttime ASC LIMIT 1;  
                        Rd-Voucher-Time-Expired := "%{sql:SELECT UNIX_TIMESTAMP(now()) - UNIX_TIMESTAMP(acctstarttime) FROM radacct WHERE username='%{request:User-Name}' ORDER by acctstarttime ASC LIMIT 1}"
                    }

                    #Check if there is still time available 
                    if(&control:Rd-Voucher-Time-Expired <= &control:Rd-Voucher-Time-Available){
                        update control {
                            Rd-Voucher-Timeout := "%{expr: %{control:Rd-Voucher-Time-Available} - %{control:Rd-Voucher-Time-Expired}}"
                        }
                    }
                    else{
                        update reply {
                            Reply-Message := "The time for voucher %{request:User-Name} is depleted"
                        }
                        reject
                    }
                }
                else{
                    update control {
                        Rd-Voucher-Timeout := "%{control:Rd-Voucher-Time-Available}"
                    }
                }
    	}
    }
}

RADIUSdesk_realm_nas_check {

    #___This check will be done in two steps ___
    # 1.) If there are no entries of the nas device's id in the na_realms table; any-one can connect and we can pass the request
    # 2.) If however there are entries; we need to check if they contain the realm the user belongs to
    #___________________________________________

    #Only if the request actually contains a value for NAS-Identifier
    if(&request:NAS-Identifier){
        #Check if some realms are associated with this NAS
        if("%{sql:SELECT COUNT(na_realms.id) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id WHERE nas.nasidentifier='%{request:NAS-Identifier}'}" > 0){
            #Only if Rd-Realm is defined; Check if this realm is one of the associated ones. If NOT; reject the request
            if(&control:Rd-Realm){ 
                if("%{sql:SELECT COUNT(nas.nasname) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id LEFT JOIN realms ON realms.id=na_realms.realm_id WHERE nas.nasidentifier='%{request:NAS-Identifier}' AND realms.name='%{control:Rd-Realm}'}" == 0){
                    update reply {
                        Reply-Message := "User %{request:User-Name} belongs to realm %{control:Rd-Realm} which cannot connect to %{request:NAS-Identifier}"
                    }
                    reject
                }
            }
        }
    }    
    
    #Only if the request actually contains a value for NAS-IP-Address
    if(&request:NAS-IP-Address){
        #Check if some realms are associated with this NAS
        if("%{sql:SELECT COUNT(na_realms.id) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id WHERE nas.nasname='%{request:NAS-IP-Address}'}" > 0){
            #Only if Rd-Realm is defined; Check if this realm is one of the associated ones. If NOT; reject the request
            if(&control:Rd-Realm){ 
                if("%{sql:SELECT COUNT(nas.nasname) AS count FROM nas LEFT JOIN na_realms ON nas.id=na_realms.na_id LEFT JOIN realms ON realms.id=na_realms.realm_id WHERE nas.nasname='%{request:NAS-IP-Address}' AND realms.name='%{control:Rd-Realm}'}" == 0){
                    update reply {
                        Reply-Message := "User %{request:User-Name} belongs to realm %{control:Rd-Realm} which cannot connect to %{request:NAS-IP-Address}"
                    }
                    reject
                }
            }
        }
    }    
}


RADIUSdesk_realm_dynamic_client_check {

    #___This check will be done in two steps ___
    # 1.) If there are no entries of the Dynamic Client's id in the dynamic_client_realms table; any-one can connect and we can pass the request
    # 2.) If however there are entries; we need to check if they contain the realm the user belongs to
    #___________________________________________

    #Only if the request actually contains a value for NAS-Identifier
    if(&request:NAS-Identifier){
        #Check if some realms are associated with this NAS
        if("%{sql:SELECT COUNT(dynamic_client_realms.id) AS count FROM dynamic_clients LEFT JOIN dynamic_client_realms ON dynamic_clients.id=dynamic_client_realms.dynamic_client_id WHERE dynamic_clients.nasidentifier='%{request:NAS-Identifier}'}" > 0){
            #Only if Rd-Realm is defined; Check if this realm is one of the associated ones. If NOT; reject the request
            if(&control:Rd-Realm){ 
                if("%{sql:SELECT COUNT(dynamic_clients.name) AS count FROM dynamic_clients LEFT JOIN dynamic_client_realms ON dynamic_clients.id=dynamic_client_realms.dynamic_client_id LEFT JOIN realms ON realms.id=dynamic_client_realms.realm_id WHERE dynamic_clients.nasidentifier='%{request:NAS-Identifier}' AND realms.name='%{control:Rd-Realm}'}" == 0){
                    update reply {
                        Reply-Message := "User %{request:User-Name} belongs to realm %{control:Rd-Realm} which cannot connect to %{request:NAS-Identifier}"
                    }
                    reject
                }
            }
        }
    }
}



	RADIUSdesk_user_ssid_check {
		#__We check if the user is flagged to only connect through certain SSIDs (Rd-Ssid-Check == 1)_
		#__If so we try to find the SSID and see if this ssid is allowed for the specific user________

		#If it is present....
		if(&control:Rd-Ssid-Check){
			#If it is == 1
			if(&control:Rd-Ssid-Check == 1){
				RADIUSdesk_rewrite_called_station_id
				if(updated){
					if("%{sql:SELECT COUNT(*) FROM user_ssids WHERE username= '%{request:User-Name}' AND ssidname= '%{control:Rd-Ssid-Value}'}" > 0){
                		ok
        			}
        			else {
						update reply {
				            Reply-Message := "User %{request:User-Name} has not permission to connect through SSID: %{control:Rd-Ssid-Value}"
				        }
                		reject
        			}
				}
				else {
					update reply {
			            Reply-Message := "No SSID available to evaluate SSID restriction"
			        }
            		reject
				}
			}
		}
	}

RADIUSdesk_user_check {

    sql
    #If the sql data sourced fine; we can do tests for the presence of the following special attributes
    if(ok){
    
        #Test to see if the account for this username is active
        if((&control:Rd-Account-Disabled)&&(&control:Rd-Account-Disabled == 1)){
    	    update reply {
                Reply-Message := "User %{request:User-Name} account disabled"
            }
            reject
        }

        #Check if this user has an activation time
        if(&control:Rd-Account-Activation-Time){
            pl_check_activation
        }

        #Set the realm if Rd-Realm is present
        if(&control:Rd-Realm){
    	    update request {
                Realm := "%{control:Rd-Realm}"
            }
        }                       	

        #If the account type is different that the default 'sql' set the Auth-Type accordingly
        if((&control:Rd-Auth-Type)&&(&control:Rd-Auth-Type != 'sql')){
            update control {
                Auth-Type := "%{control:Rd-Auth-Type}"
            }
        }

        #Check if there are any data counters defined for this user
        RADIUSdesk_data_counter

        #Check if there are any time counters defined for this user
        RADIUSdesk_time_counter

        #Check if it is a voucher with Rd-Voucher and if it is still valid
        RADIUSdesk_voucher_check

        #Check if this realm is allowed to connect to this device
        #Depending if it is a dynamic client or normal one we do an appropriate check

        if(&control:Rd-Dynamic-Client){
            if(&control:Rd-Dynamic-Client == 1){
                RADIUSdesk_realm_dynamic_client_check
            }
            else{
                RADIUSdesk_realm_nas_check
            }
        }

		#Check if there are SSID restrictions declared
		RADIUSdesk_user_ssid_check
    }
}

RADIUSdesk_main {

    # Check if MAC username and set the MAC username to the convention AA-BB-CC-DD-12...
    if(&request:User-Name =~ /^([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})$/i){
        update request {
            User-Name := "%{1}-%{2}-%{3}-%{4}-%{5}-%{6}"
        }
	}

    #If the user is not present we will reject the request
    if("%{sql:SELECT count(username) FROM radcheck WHERE radcheck.username='%{request:User-Name}'}" == 0){
        update reply {
            Reply-Message := "User %{request:User-Name} not registered"
        }
        reject
    }


    #See if the device is perhaps declared (only if Calling-Station-Id is in request)
    if(&request:Calling-Station-Id){
        if("%{sql:SELECT count(username) FROM radcheck WHERE radcheck.username='%{request:Calling-Station-Id}'}" != 0){
            RADIUSdesk_device_check
 
        }   #Are we allowing the user to connect with undeclared MAC's?
        elsif("%{sql:SELECT count(radcheck.username) FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Mac-Check' and value=1}" != 0){
            update reply {
                Reply-Message := "User %{request:User-Name} are not allowed to connect with a device containing MAC %{request:Calling-Station-Id}"
            }
            reject
        }
    }

     #Check if device; and who is the owner and if the owner has some restrictions
    update control {
        Rd-Tmp-Owner := "%{sql:SELECT IFNULL((SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Device-Owner'),'rd_not_found')}"
    }

    if(&control:Rd-Tmp-Owner != 'rd_not_found'){ 
        RADIUSdesk_device_owner_check
    }
    else {
        RADIUSdesk_user_check  
    }
}

RADIUSdesk_session_timeout {

    if(&reply:Session-Timeout){
        #Check if Rd-Avail-Time AND Rd-Voucher-Timeout is present. 
        #Find the smallest of them and compare it with reply:Session-Timeout
        if((&control:Rd-Avail-Time)&&(&control:Rd-Voucher-Timeout)){
            if(&control:Rd-Avail-Time < &control:Rd-Voucher-Timeout ){
                if( &reply:Session-Timeout  >  &control:Rd-Avail-Time){
                    update reply {
                        Session-Timeout := "%{control:Rd-Avail-Time}"
                    }
                }     
            }
            else {
                if( &reply:Session-Timeout  >  &control:Rd-Voucher-Timeout){
                    update reply {
                        Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                    }
                }
            }
        }
        elsif(&control:Rd-Avail-Time){
            if( &reply:Session-Timeout  >  &control:Rd-Avail-Time){
                update reply {
                    Session-Timeout := "%{control:Rd-Avail-Time}"
                }
            } 
        }
        elsif(&control:Rd-Voucher-Timeout){
            if( &reply:Session-Timeout  >  &control:Rd-Voucher-Timeout){
                update reply {
                    Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                }
            }
        }
    }
    else {
        #Check if Rd-Avail-Time AND Rd-Voucher-Timeout is present. 
        #Find the smallest of them and set that to Session-Timeout reply attribute
        if((&control:Rd-Avail-Time)&&(&control:Rd-Voucher-Timeout)){
            if(&control:Rd-Avail-Time < &control:Rd-Voucher-Timeout){
                update reply {
                    Session-Timeout := "%{control:Rd-Avail-Time}"
                } 
            }
            else {
                update reply {
                    Session-Timeout := "%{control:Rd-Voucher-Timeout}"
                }
            }
        }
        elsif(&control:Rd-Avail-Time){
            update reply {
                Session-Timeout := "%{control:Rd-Avail-Time}"
            }
        }
        elsif(&control:Rd-Voucher-Timeout){
            update reply {
                Session-Timeout := "%{control:Rd-Voucher-Timeout}"
            }
        }
    }
}

#Add-On May 2022
RADIUSdesk_logintime {
    if(&request:NAS-Identifier){
        #Check wether the client is there and active
        update control {
            #If we do not find an entry we return 2
            Rd-Client-Timezone := "%{sql:SELECT IFNULL((SELECT tz.name FROM dynamic_clients c LEFT JOIN timezones tz ON tz.id = c.timezone where c.nasidentifier='%{request:NAS-Identifier}'),'timezone_not_found')}"            
        }
    }
    else {
        update control {
            #If we do not find an entry we return 2
            Rd-Client-Timezone := "%{sql:SELECT IFNULL((SELECT tz.name FROM user_settings us LEFT JOIN timezones tz ON tz.id = us.value where us.name='timezone' AND us.user_id=-1 LIMIT 1),'timezone_not_found')}"          
        }  
    }
    pl_logintime
}

RADIUSdesk_post_auth {
    #This will record authentication attempts on any unknown user successfully authenticating
    
    #EAP-Message request does not contain the Realm; source it first
    if(EAP-Message){
        update control {
            Rd-Realm = "%{sql:SELECT IFNULL((SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Realm'),'rd_not_found')}"
            Rd-Not-Track-Auth = "%{sql:SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Not-Track-Auth'}"
        }

        if(&control:Rd-Realm != 'rd_not_found'){
    	    update request {
                Realm := "%{control:Rd-Realm}"
            }
        }   
    }

	if((!&control:Rd-Not-Track-Auth)||(&control:Rd-Not-Track-Auth != 1)){
		sql
	}
}

RADIUSdesk_last_accept {
    #We do this regardless - if there's a match it will update no need to first check if there is a match! 
    if(&request:NAS-Identifier){   
        "%{sql:UPDATE `permanent_users` SET last_accept_time=now(),last_accept_nas='%{request:NAS-Identifier}' where username='%{User-Name}'}"
        "%{sql:UPDATE `devices` SET last_accept_time=now(),last_accept_nas='%{request:NAS-Identifier}' where name='%{Calling-Station-Id}'}"
        "%{sql:UPDATE `vouchers` SET last_accept_time=now(),last_accept_nas='%{request:NAS-Identifier}' where name='%{User-Name}'}"
    }
}

RADIUSdesk_last_reject {
    #We do this regardless!
    #Check if it is an EAP request; if PEAP the error message will not be set.
    # http://freeradius.1045715.n5.nabble.com/Sending-Reply-Message-in-Access-Reject-PEAP-MSCHAPv2-td4421770.html
    if(EAP-Message){
        if(!&reply:Reply-Message){
            update reply {
                Reply-Message := "Most likely PEAP failure. Run in debug"
            }
        }
    }

    #We do this regardless - if there's a match it will update no need to first check if there is a match!
    if(&request:NAS-Identifier){
        "%{sql:UPDATE `permanent_users` SET last_reject_time=now(),last_reject_nas='%{request:NAS-Identifier}',last_reject_message='%{%{reply:Reply-Message}:-N/A}' where username='%{User-Name}'}"
        "%{sql:UPDATE `devices` SET last_reject_time=now(),last_reject_nas='%{request:NAS-Identifier}',last_reject_message='%{%{reply:Reply-Message}:-N/A}' where name='%{Calling-Station-Id}'}"
        "%{sql:UPDATE `vouchers` SET last_reject_time=now(),last_reject_nas='%{request:NAS-Identifier}',last_reject_message='%{%{reply:Reply-Message}:-N/A}' where name='%{User-Name}'}"
    }
    
}

RADIUSdesk_set_acct_realm {

    #Check if there is a realm defiend for this user and update if so
 if(&request:User-Name){
            update control {
                    Rd-Realm := "%{sql:SELECT IFNULL((SELECT value FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Realm'),'rd_not_found')}"
            }
    }

    if(&control:Rd-Realm != 'rd_not_found'){ 
        update request {
            Realm := "%{control:Rd-Realm}"
        }
    }
}

RADIUSdesk_async_acct {
    #Requires a User-Name in the request and a table called new_accountings with a username column
    if((&request:User-Name)&&(&request:Calling-Station-Id)){
        "%{sql:INSERT IGNORE INTO new_accountings SET new_accountings.username='%{request:User-Name}',new_accountings.mac='%{request:Calling-Station-Id}'}"
    }
}

RADIUSdesk_auto_devices_check {
    #Requires a User-Name in the request and a table called new_accountings with a username column
    if((&request:User-Name)&&(&request:Calling-Station-Id)){
        if((&control:Rd-Auto-Mac)&&(&control:Rd-Auto-Mac == 1)){
            "%{sql:INSERT IGNORE INTO auto_devices SET auto_devices.username='%{request:User-Name}', auto_devices.mac='%{request:Calling-Station-Id}'}"
        }
    }
}

#Check if accounting is not disabled for this user;
#If it is NOT disabled; set the realm and add an entry to the new_accountings entry if not already present
#Else set the Rd-Not-Track-Acct flag to 1 which will cause the sql accounting to be ignored in the acct section

RADIUSdesk_preacct {

    #RADIUSdesk -> Used to normalise the callingstation id to format aa-bb-cc-dd-ee.. (lowercase with dash)
    RADIUSdesk_rewrite_calling_station_id

    #See if we it is perhaps a device and if we then need to change to the username
    if(&request:User-Name =~ /^([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})[-:]+([0-9a-f]{2})$/i){

        update control {
            Rd-Device-Owner = "%{sql:SELECT IFNULL((SELECT value FROM radcheck WHERE radcheck.username='%{request:Calling-Station-Id}' and attribute='Rd-Device-Owner'),'rd_not_found')}"
        }

        if(&control:Rd-Device-Owner != 'rd_not_found'){
            update request {
                User-Name := "%{control:Rd-Device-Owner}"
            }
        }

        #Add the posibility to attach devices to Vouchers
        update control {
            Rd-Voucher-Device-Owner = "%{sql:SELECT IFNULL((SELECT value FROM radcheck WHERE radcheck.username='%{request:Calling-Station-Id}' and attribute='Rd-Voucher-Device-Owner'),'rd_not_found')}"
        }

        if(&control:Rd-Voucher-Device-Owner != 'rd_not_found'){
            update request {
                User-Name := "%{control:Rd-Voucher-Device-Owner}"
            }
        }
    }

    #Only if the Rd-Not-Track-Acct is NOT present OR set to 0!
    update control {
        Rd-Not-Track-Acct = "%{sql:SELECT count(radcheck.username) FROM radcheck WHERE radcheck.username='%{request:User-Name}' and attribute='Rd-Not-Track-Acct' and value=1}"
    }
    if(&control:Rd-Not-Track-Acct == 0){
        RADIUSdesk_set_acct_realm
        RADIUSdesk_async_acct
    }
}

RADIUSdesk_acct {
    #Note that this requires the RADIUSdesk_preacc to be specified in the preacct section wher it can be triggered
    if((!&control:Rd-Not-Track-Acct)||(&control:Rd-Not-Track-Acct != 1)){
		sql
	}
}

#____ END RADIUSdesk policies __________
